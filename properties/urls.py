"""
Properties URLs - Shop Window Backend API
URL routing for shopping centers and tenants API endpoints.

Implements URL patterns matching OpenAPI 3.0 specification.
"""

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from rest_framework.urlpatterns import format_suffix_patterns

from . import views

# =============================================================================
# DRF ROUTER CONFIGURATION
# =============================================================================

# Create router for ViewSets (automatic CRUD URL generation)
router = DefaultRouter()
router.register(r'shopping-centers', views.ShoppingCenterViewSet, basename='shoppingcenter')
router.register(r'tenants', views.TenantViewSet, basename='tenant')

# =============================================================================
# API URL PATTERNS
# =============================================================================

# Individual URL patterns for specific endpoints
api_urlpatterns = [
    # Health and utility endpoints
    path('health/', views.health_check, name='health-check'),
    path('info/', views.api_info, name='api-info'),
    
    # Spatial query endpoints
    path('nearby/', views.nearby_properties, name='nearby-properties'),
    
    # Shopping Centers - Custom Actions
    # Note: ViewSet actions are automatically included via router
    # These include:
    # - GET /shopping-centers/{id}/tenants/ (via @action decorator)
    # - POST /shopping-centers/{id}/tenants/ (via add_tenant action)
    # - GET /shopping-centers/{id}/analytics/ (via analytics action)
    
    # Import endpoints (Sprint 2 - placeholder)
    # path('import/csv/', views.import_csv, name='import-csv'),
    # path('import/pdf/', views.import_pdf, name='import-pdf'),
]

# =============================================================================
# URL PATTERNS EXPORT
# =============================================================================

urlpatterns = [
    # Include router URLs (provides REST endpoints)
    path('', include(router.urls)),
    
    # Include custom API patterns
    path('', include(api_urlpatterns)),
]

# Add format suffix patterns for API versioning support (.json, .xml, etc.)
urlpatterns = format_suffix_patterns(urlpatterns)

# =============================================================================
# URL PATTERN REFERENCE
# =============================================================================

"""
Complete URL Pattern Reference (generated by router + custom patterns):

SHOPPING CENTERS:
================
GET    /api/v1/shopping-centers/                    # List shopping centers (with filtering, search, pagination)
POST   /api/v1/shopping-centers/                    # Create new shopping center
GET    /api/v1/shopping-centers/{id}/               # Retrieve specific shopping center
PATCH  /api/v1/shopping-centers/{id}/               # Partial update shopping center
PUT    /api/v1/shopping-centers/{id}/               # Full update shopping center
DELETE /api/v1/shopping-centers/{id}/               # Delete shopping center

SHOPPING CENTER TENANTS:
=======================
GET    /api/v1/shopping-centers/{id}/tenants/       # List tenants for specific center
POST   /api/v1/shopping-centers/{id}/tenants/       # Add tenant to specific center
GET    /api/v1/shopping-centers/{id}/analytics/     # Get center analytics summary

TENANTS:
========
GET    /api/v1/tenants/                             # List all tenants (with filtering, search, pagination)
POST   /api/v1/tenants/                             # Create new tenant
GET    /api/v1/tenants/{id}/                        # Retrieve specific tenant
PATCH  /api/v1/tenants/{id}/                        # Partial update tenant
PUT    /api/v1/tenants/{id}/                        # Full update tenant
DELETE /api/v1/tenants/{id}/                        # Delete tenant

UTILITY ENDPOINTS:
==================
GET    /api/v1/health/                              # Health check endpoint
GET    /api/v1/info/                                # API information and statistics
GET    /api/v1/nearby/?lat={lat}&lng={lng}&radius={miles}  # Find nearby properties

IMPORT ENDPOINTS (Sprint 2):
============================
POST   /api/v1/import/csv/                          # CSV import (coming in Sprint 2)
POST   /api/v1/import/pdf/                          # PDF import (coming in Sprint 2)

QUERY PARAMETERS:
================

Shopping Centers List (/shopping-centers/):
- page: Page number (pagination)
- page_size: Items per page (max 100)
- search: Search in name, city, state, owner, property_manager
- ordering: Sort by fields (name, gla, quality_score, created_at, updated_at)
- bounds: Map bounds filtering "sw_lat,sw_lng,ne_lat,ne_lng"

Filtering Parameters (via DjangoFilterBackend):
- address_city: Filter by city
- address_state: Filter by state
- center_type: Filter by center type
- total_gla__gte: Minimum GLA
- total_gla__lte: Maximum GLA
- data_quality_score__gte: Minimum quality score
- owner: Filter by owner name
- property_manager: Filter by property manager

Tenants List (/tenants/):
- page: Page number (pagination)
- page_size: Items per page (max 100)
- search: Search in tenant name, retail category
- ordering: Sort by fields (name, square_footage, base_rent, created_at)
- shopping_center: Filter by shopping center ID
- occupancy_status: Filter by occupancy status
- is_anchor: Filter anchor tenants (true/false)

RESPONSE FORMATS:
================

All endpoints support multiple formats via URL suffix:
- /api/v1/shopping-centers/.json (default)
- /api/v1/shopping-centers/.xml
- /api/v1/shopping-centers/.yaml

Content negotiation also supported via Accept header:
- Accept: application/json
- Accept: application/xml
- Accept: application/yaml

ERROR HANDLING:
==============

Standard HTTP status codes:
- 200 OK: Successful GET/PATCH/PUT
- 201 Created: Successful POST
- 204 No Content: Successful DELETE
- 400 Bad Request: Validation errors
- 401 Unauthorized: Authentication required
- 403 Forbidden: Permission denied
- 404 Not Found: Resource not found
- 500 Internal Server Error: Server error

All error responses include:
{
    "error": "Error description",
    "details": {...},  # Additional error details if available
    "status_code": 400
}

AUTHENTICATION:
==============

Most endpoints require JWT authentication:
Header: Authorization: Bearer <jwt_token>

Public endpoints (no auth required):
- GET /api/v1/health/
- Render WSGI health check

PAGINATION:
===========

List endpoints return paginated results:
{
    "count": 150,
    "next": "http://api/v1/shopping-centers/?page=3",
    "previous": "http://api/v1/shopping-centers/?page=1",
    "results": [...]
}

Default page size: 20
Maximum page size: 100
Query param: ?page_size=50

BUSINESS RULES ENFORCED:
=======================

Shopping Centers:
- Name must be unique (400 error if duplicate)
- Auto-calculate center_type from total_gla
- Auto-geocode from address fields
- Auto-calculate data_quality_score
- Progressive enrichment (all fields optional except name)

Tenants:
- Suite numbers unique within shopping center
- Can exist in multiple shopping centers
- Shopping center relationship required

SPATIAL QUERIES:
===============

Nearby Properties:
GET /api/v1/nearby/?lat=40.7589&lng=-73.9851&radius=5

Returns properties within specified radius (miles) of coordinates.
Uses PostGIS for efficient spatial indexing.

Map Bounds Filtering:
GET /api/v1/shopping-centers/?bounds=40.7,-74.0,40.8,-73.9

Filters properties within map viewport bounds.
Format: southwest_lat,southwest_lng,northeast_lat,northeast_lng
"""
